{"creationTimeStamp":"2024-03-08T02:04:58.950Z","modifiedTimeStamp":"2024-03-15T18:54:46.940Z","createdBy":"samiul","modifiedBy":"viya_admin","name":"LLM - Azure OpenAI RAG.step","displayName":"LLM - Azure OpenAI RAG.step","localDisplayName":"LLM - Azure OpenAI RAG.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","uri":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","uri":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","uri":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","uri":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","uri":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","uri":"/dataFlows/steps/574c93d2-e027-4e01-9063-5b81704efb34","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"outputTable","displayName":"outputTable","localDisplayName":"outputTable","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Source files (your answer bank)\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"folder_or_file_selector\",\n\t\t\t\t\t\t\t\"type\": \"radiogroup\",\n\t\t\t\t\t\t\t\"label\": \"Select an entire folder or a specific file to query:\",\n\t\t\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"folder\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Select a Folder\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"file\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Select a File\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"value\": \"existing\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Context already loaded\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: The file or folder should be located on the filesystem.  \",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"answerBankFile\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Select a file:\",\n\t\t\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$folder_or_file_selector\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"file\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"enabled\": [\n\t\t\t\t\t\t\t\t\"$folder_or_file_selector\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"file\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"answerBankFolder\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Select a folder:\",\n\t\t\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"$folder_or_file_selector\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"folder\"\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\"enabled\": [\n\t\t\t\t\t\t\t\t\"$folder_or_file_selector\",\n\t\t\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\t\t\"folder\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section4\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Question\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"questionText\",\n\t\t\t\t\t\t\t\"type\": \"textarea\",\n\t\t\t\t\t\t\t\"label\": \"Type your question below:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section9\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specification\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputTable\",\n\t\t\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\t\t\"label\": \"Provide output table:\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Configuration\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"embedding_model\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Embedding model\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"embeddingModelDeployment\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide name of your Azure OpenAI model deployment for embedding models: \",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Vector store (Chroma)\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"persistentPathName\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Provide a path to the vector store's persistent location:\",\n\t\t\t\t\t\t\t\"pathtype\": \"folder\",\n\t\t\t\t\t\t\t\"placeholder\": \"sasserver:/tmp\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text5\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Provide a collection name below.  If collection does not exist, then a new one will be created. You should have write access to the above path in case you need to create a collection.\",\n\t\t\t\t\t\t\t\"visible\": \"$persistentPathName\",\n\t\t\t\t\t\t\t\"enabled\": \"$persistentPathName\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"collectionName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide name for vector store collection:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"$persistentPathName\",\n\t\t\t\t\t\t\t\"enabled\": \"$persistentPathName\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Text generation model\",\n\t\t\t\t\t\"open\": false,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"genModelDeployment\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide name of your Azure OpenAI generation model deployment:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section5\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Azure OpenAI service\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"azureKeyLocation\",\n\t\t\t\t\t\t\t\"type\": \"path\",\n\t\t\t\t\t\t\t\"label\": \"Provide path to your Azure OpenAI key:\",\n\t\t\t\t\t\t\t\"pathtype\": \"file\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Ensure this key is located in a file saved in a secure folder.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"azureOpenAIEndpoint\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide URL for Azure OpenAI service endpoint:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"azureRegion\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide region for Azure OpenAI service\",\n\t\t\t\t\t\t\t\"placeholder\": \"Default value: eastus2\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"about\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About WIP\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_description\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"LLM - Azure OpenAI-based Retrieval Augmented Generation (RAG) \\n==============================================\\n\\nThis custom step makes use of a Retrieval Augmented Generation (RAG) approach to provide right context to an Azure OpenAI LLM model in order to answer a question.  \\n\\nLarge Language Models (LLMs) require context in order to provide relevant answers, especially when the question is based on a local body of knowledge / document corpus.  \\n\\nA RAG approach, explained in simple terms, retrieves data which is relevant to the question asked, and provides the same to an LLM to use as context.  Results obtained from a RAG approach are expected to reduce hallucinations by LLMs (i.e. an LLM makes up answers which may be irrelevant or false).\\n\\nUpon receiving a prompt, this step queries a Chromadb vector store and passes on retreived documents to an Azure OpenAI service.   \\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section8\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Prerequisites\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text4\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. Python:  Python version 3.10 is recommended at a minimum in order to avoid package dependency issues.\\n\\n2. Python packages to be installed:\\n\\n   i.    langchain: https://pypi.org/project/langchain/\\n   ii.   langchain-community: https://pypi.org/project/langchain-community/\\n   iii.  langchain-openai: https://pypi.org/project/langchain-openai/\\n  iv.   PyPDF: https://pypi.org/project/pypdf/\\n  v.    sentence-transformers: https://pypi.org/project/sentence-transformers/\\n  vi.   chromadb: https://pypi.org/project/chromadb/\\n  vii.  pysqlite-binary: https://pypi.org/project/pysqlite-binary/\\n\\n3. Viya 4 environment version 2024.01 or later\\n\\n4. Valid Azure OpenAI service with embedding & large language models deployed.  Refer here for instructions: https://learn.microsoft.com/en-us/azure/ai-services/openai/quickstart?tabs=command-line%2Cpython-new&pivots=programming-language-studio \\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section10\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Assumptions\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text6\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Future enhancements may do away with some of the assumptions below. Current assumptions for this initial release:\\n\\n1. Users can choose either an existing Chroma DB vector database collection. or load PDF files to an existing or new Chroma DB collection.\\n\\n2. Users can choose to load all PDFs in a directory on the SAS Server (filesystem), or select a PDF of their choice.\\n\\n3. Chroma DB is currently the only support vector store.\\n\\n4. PDFs are currently the only supported loadable file format.  However, you may choose to ingest various other document types into a Chroma DB collection beforehand, using the \\\"Vector Databases - Hydrate Chroma DB collection\\\" SAS Studio Custom Step (refer documentation)\\n\\n5. The user has already configured Azure OpenAI services to deploy both an embedding function and LLM service, or knows the deployment names. \\n\\n6. Chroma DB follows client / server architecture.  This step implicitly considers the client and server to be on the same machine.  Users are free to modify the step for other modes of accessing the vector store.  Refer Chroma documentation for details.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_parameters\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Parameters\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_input\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"input_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Source file location (optional, default is Context already loaded): In case you wish to present new source files to use as context,  choose either selecting a folder or file. Otherwise, provide the name of an existing vector store collection in Configuration.\\n\\n2. Question (text area, required): Provide your question to the LLM. Note that this will be added to additional system prompt, to create a prompt that will be passed to the LLM.\\n\\n3  Input table containing a text column (input port, required): attach a CAS table to this port. \\n\\n4. Query column (column selector, required, maximum 1): select a text column which contains the query you wish to pass to the database.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_output_specs\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Number of results (numeric stepper): provide the number of results you wish to have returned for each observation of the query column. \\n\\n2. Output table (output port, required): attach a CAS table to the output port of this node to hold results.\\n\\n3. Promote (check box): check this box if you wish to have the output table promoted to global scope (and be available beyond the SAS Studio session)\\n\\nUpon successful completion, the output table will contain the query, the id of the result documents, distance measure and the document content.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"parameters_config_1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Configuration \",\n\t\t\t\t\t\t\t\"open\": 1,\n\t\t\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"output_parameters_text_1\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"1. Embedding model caslib (text field, required):  provide the caslib containing a VTA embedding model which will be applied to the query in order to generate embeddings.\\n\\n2. Embedding model astore name (text field, required): provide the name of a VTA astore model to generate embeddings on the query text. \\n\\n------------------------------------------------------------------\\nFollow this process to obtain the above values:\\n\\n(i) In Model Studio, right click on the topics node you used to create an embeddings model.  Select Results\\n(ii) In the score code portion of the results, locate and copy the values of the following macro variables: input_astore_caslib_name & input_astore_name.  Use in the above two fields.\\n(iii) Some users may choose to develop embedding models programmatically.  They would have specified an astore name and caslib while doing so, which can be used for above fields.\\n------------------------------------------------------------------\\n\\n3. Embedding pattern (text column, required, default of _Col):  document embeddings tend to be long series involving 100s or sometimes 1000s of columns.  Provide a text pattern which applies to all embedding column names. For example,  _Col represents _Col_1, _Col_2..... _Col_n.  A default of _Col is provided since this happens to be the default value for Visual Text Analytics-generated embeddings.\\n\\n4. Location for Chroma database (folder selector, required): select a location where the Chroma database is persisted.  Note this needs to be on the filesystem (SAS Server) and not SAS Content.  \\n\\n5. CAS server (text field, default entered): change this only if you need a CAS server name different from a typical Viya 4 installation.\\n\\n6. CAS port (numeric field, default entered): change this only if you know that the CAS server runs on a different port than the default.\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_runtimecontrol\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Run-time Control\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"runtimecontrol_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"Note: Run-time control is optional.  You may choose whether to execute the main code of this step or not, based on upstream conditions set by earlier SAS programs.  This includes nodes run prior to this custom step earlier in a SAS Studio Flow, or a previous program in the same session.\\n\\nRefer this blog (https://communities.sas.com/t5/SAS-Communities-Library/Switch-on-switch-off-run-time-control-of-SAS-Studio-Custom-Steps/ta-p/885526) for more details on the concept.\\n\\nThe following macro variable,\\n\\n_qcd_run_trigger\\n\\nwill initialize with a value of 1 by default, indicating an \\\"enabled\\\" status and allowing the custom step to run.\\n\\nIf you wish to control execution of this custom step, include code in an upstream SAS program to set this variable to 0.  This \\\"disables\\\" execution of the custom step.\\n\\nTo \\\"disable\\\" this step, run the following code upstream:\\n\\n%global _qcd_run_trigger;\\n%let _qcd_run_trigger =0;\\n\\nTo \\\"enable\\\" this step again, run the following (it's assumed that this has already been set as a global variable):\\n\\n%let _qcd_run_trigger =1;\\n\\nIMPORTANT: Be aware that disabling this step means that none of its main execution code will run, and any  downstream code which was dependent on this code may fail.  Change this setting only if it aligns with the objective of your SAS Studio program.\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about_documentation\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Documentation\",\n\t\t\t\t\t\"open\": 0,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"documentation_text\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"1. Documentation for the chromadb Python package: https://docs.trychroma.com\\n\\n2. An important note regarding sqlite: https://docs.trychroma.com/troubleshooting#sqlite\\n\\n3. SAS Communities article on configuring Viya for Python integration: https://communities.sas.com/t5/SAS-Communities-Library/Configuring-SAS-Viya-for-Python-Integration/ta-p/847459\\n\\n4. The SAS Viya Platform Deployment Guide (refer to SAS Configurator for Open Source within): https://go.documentation.sas.com/doc/en/itopscdc/default/itopssr/p1n66p7u2cm8fjn13yeggzbxcqqg.htm?fromDefault=#p19cpvrrjw3lurn135ih46tjm7oi \\n\\n5.  Options for persistent clients and client connections in Chroma: https://docs.trychroma.com/usage-guide\\n\\n6.  Every custom step is a learning opportunity for SAS programming!  I revisited the venerable but still powerful DATALINES (DATALINES4) statement and it proved helpful in negotiating a design challenge in the SAS program.  Documentation: https://go.documentation.sas.com/doc/en/pgmsascdc/default/lestmtsref/p1mm9b070wj962n16q0v1d9uku5q.htm\\n\\n7. Documentation for the Analytic Store Scoring action set: https://go.documentation.sas.com/doc/en/pgmsascdc/default/casactml/casactml_astore_toc.htm \\n\\n8. SAS Communities article on connecting to CAS using the SWAT package in SAS Studio: https://communities.sas.com/t5/SAS-Communities-Library/Hotwire-your-SWAT-inside-SAS-Studio/ta-p/835956\\n\",\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"version_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Version: 1.0  (30JAN2024)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"contact_text\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Created/contact: \\n\\n- Samiul Haque (samiul.haque@sas.com)\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"folder_or_file_selector\": {\n\t\t\t\"value\": \"existing\",\n\t\t\t\"label\": \"Context already loaded\"\n\t\t},\n\t\t\"answerBankFile\": \"\",\n\t\t\"answerBankFolder\": \"\",\n\t\t\"questionText\": \"\",\n\t\t\"outputTable\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"embeddingModelDeployment\": \"\",\n\t\t\"persistentPathName\": \"\",\n\t\t\"collectionName\": \"\",\n\t\t\"genModelDeployment\": \"\",\n\t\t\"azureKeyLocation\": \"\",\n\t\t\"azureOpenAIEndpoint\": \"https://<your_openai_service>.azure.com/\",\n\t\t\"azureRegion\": \"eastus2\"\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n\n/*-----------------------------------------------------------------------------------------*\n   Python Block Definition\n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   The following block of code has been created for the purpose of allowing proc python \n   to execute within a macro. Execution within a macro allows for other checks to be carried \n   out through SAS prior to handing off to the Python step.\n\n   In this example, a temporary file is created containing the requisite Python commands, which \n   are then executed through infile reference.\n\n   Note that Python code is pasted as-is and may be out of line with the SAS indentation followed.\n\n*------------------------------------------------------------------------------------------*/\nfilename aorcode temp;\n\ndata _null_;\n\n   infile datalines4 truncover pad;\n   input ;   \n   file aorcode;\n   put @1 _infile_;\n   datalines4;\n\n\n#############################################################################################\n#\n#  The pysqlite3 import allows for the code to also run in (some) older Python (or sqlite) versions.\n#\n#############################################################################################\n\n__import__('pysqlite3')\nimport sys\nsys.modules['sqlite3'] = sys.modules.pop('pysqlite3')\n\n#############################################################################################\n#\n#  Import packages\n#\n#############################################################################################\n\nfrom langchain.document_loaders import DirectoryLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.schema import Document\n# from langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores.chroma import Chroma\nfrom langchain.prompts import ChatPromptTemplate\n#from langchain_community.chat_models import ChatOpenAI\nfrom langchain_openai import AzureOpenAIEmbeddings\nfrom langchain_openai import AzureOpenAI\nfrom langchain_community.document_loaders import PyPDFLoader\nimport os\nimport shutil\nimport chromadb\nimport json\n\n#############################################################################################\n#\n#  Refer https://docs.trychroma.com/telemetry for details.  Recommend to opt out of anonymized \n#  unless you can confidently configure permissions on the Python build location (admin-level).\n#\n#############################################################################################\n\nos.environ['ANONYMIZED_TELEMETRY'] = \"False\"\n\n#############################################################################################\n#\n#   Obtain values from UI\n#\n#############################################################################################\n\n_aor_error_flag = int(SAS.symget('_aor_error_flag'))\n_aor_error_desc = SAS.symget('_aor_error_desc')\ndata_path = SAS.symget('_data_location')\nchroma_path = SAS.symget('persistentPath')\ncollection_name =  SAS.symget(\"collectionName\")\nquery_text=SAS.symget('questionText')\nembedding_model_deployment = SAS.symget(\"embeddingModelDeployment\")\ngen_model_deployment = SAS.symget(\"genModelDeployment\")\nfolder_file_selector = SAS.symget('folder_or_file_selector')\n\n#############################################################################################\n#\n#   Set environment variables for Azure OpenAI\n#\n#############################################################################################\n\nos.environ[\"AZURE_OPENAI_API_KEY\"]= SAS.symget('AZURE_OPENAI_KEY')\nos.environ[\"AZURE_OPENAI_ENDPOINT\"]= SAS.symget('azureOpenAIEndpoint')\nos.environ[\"OPENAI_API_VERSION\"] = \"2023-12-01-preview\"\n\n#############################################################################################\n#\n#   Helper functions\n#\n#############################################################################################\n\ndef load_documents(isFolder):\n   '''Reads in all documents or a single pdf doc using PyPDF or directory loader'''\n\n   SAS.logMessage(f\"Answer bank located at {data_path}\")\n\n   if isFolder==\"folder\":\n      loader = DirectoryLoader(data_path,glob=\"*.pdf\",loader_cls=PyPDFLoader)\n\n   else:\n      loader=PyPDFLoader(data_path)\n\n   documents=loader.load_and_split()\n   return documents\n\ndef save_to_chroma(chunks: list[Document]):\n   ''' Loads data to Chroma DB '''\n\n   embedding_method= AzureOpenAIEmbeddings( azure_deployment=embedding_model_deployment, openai_api_version=\"2023-05-15\")\n   db = Chroma.from_documents( documents = chunks, embedding = embedding_method, client = chroma_client, collection_name = collection_name, persist_directory=chroma_path )\n   db.persist()\n   print(f\"Saved {len(chunks)} chunks to {chroma_path}.\")\n\n\nSAS.logMessage(chroma_path)\n\n#############################################################################################\n#\n#   Establish a Chroma connection\n#\n#############################################################################################\n\nchroma_client = chromadb.PersistentClient(path=chroma_path)\n\ncollections = [item.name for item in [name for name in chroma_client.list_collections()]]\n\nif folder_file_selector == \"existing\":\n\n   if not(collection_name in collections):\n      _aor_error_flag = 1\n      _aor_error_desc = f\"{collection_name} is not in the list of collections in Chroma\"\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\nif _aor_error_flag == 0:\n\n   try:\n      chroma_client.get_or_create_collection(name=collection_name)\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n#############################################################################################\n#\n#   Load answer bank to a document object & chunk them\n#\n#############################################################################################\n\n\nif _aor_error_flag == 0 and not(folder_file_selector==\"existing\"):\n\n   try: \n      doc = load_documents(folder_file_selector)\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n \n   try:\n      text_splitter = RecursiveCharacterTextSplitter(\n         chunk_size=1000,\n         chunk_overlap=500,\n         length_function=len,\n         add_start_index=True\n      )\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n   try:\n      chunks=text_splitter.split_documents(doc)\n      SAS.logMessage(\"Answers loaded to document object\")\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n\n#############################################################################################\n#\n#   Load to Chroma\n#\n#############################################################################################\n\n   try:\n      save_to_chroma(chunks)\n      print(f\"Saved {len(chunks)} chunks to {chroma_path}.\")\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\nif _aor_error_flag == 0:\n\n   try:\n      embedding_function = AzureOpenAIEmbeddings(\n         azure_deployment = embedding_model_deployment,\n         openai_api_version = os.environ[\"OPENAI_API_VERSION\"],\n      )\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\nif _aor_error_flag == 0:\n\n   try:\n      db = Chroma(persist_directory=chroma_path, embedding_function=embedding_function,collection_name=collection_name)\n      SAS.logMessage(\"Answers loaded to Chroma\")\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n\n#############################################################################################\n#\n#   Design Prompt template\n#\n#############################################################################################\n\nif _aor_error_flag == 0:\n   PROMPT_TEMPLATE = \"\"\"\nAnswer the question based only on provided context. If you don't know the answer, state that you don't know. \nContext:{context}\n---\nQuestion: {question}\n\"\"\"\n\n#############################################################################################\n#\n#   Retrieve results\n#\n#############################################################################################\n\n   try:\n      results = db.similarity_search_with_relevance_scores(query_text, k=10)\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n\n   context_text = \"\\n\\n---\\n\\n\".join([doc.page_content for doc, _score in results])\n   \nif _aor_error_flag == 0:\n\n   try:\n      prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)\n      prompt = prompt_template.format(context=context_text, question=query_text)\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n#############################################################################################\n#\n#   Execute prompt with provided context\n#\n#############################################################################################\n\nif _aor_error_flag == 0:\n\n   try:\n      from langchain_openai import AzureChatOpenAI\n\n   except ImportError as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n   \n   try:\n      model = model = AzureChatOpenAI(azure_deployment=gen_model_deployment,)\n      response_text = model.predict(prompt)\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n\n#############################################################################################\n#\n#   Write results to ODS output\n#\n#############################################################################################\n\nif _aor_error_flag == 0:\n\n   try:\n      sources = [doc.metadata.get(\"source\", None) for doc, _score in results]\n      formatted_response = f\"Response: {response_text}\\nSources: {sources}\"\n      print(formatted_response)\n      SAS.symput('responseVar',response_text)\n\n   except Exception as e:\n      _aor_error_flag = 1\n      _aor_error_desc = str(e)\n      SAS.logMessage(_aor_error_desc,\"error\")\n      SAS.symput(\"_aor_error_flag\",_aor_error_flag)\n      SAS.symput(\"_aor_error_desc\",_aor_error_desc)\n\n;;;;\n   \n\nrun;\n\n\n/*-----------------------------------------------------------------------------------------*\n   START MACRO DEFINITIONS.\n*------------------------------------------------------------------------------------------*/\n\n/* -------------------------------------------------------------------------------------------* \n   Macro to initialize a run-time trigger global macro variable to run SAS Studio Custom Steps. \n   A value of 1 (the default) enables this custom step to run.  A value of 0 (provided by \n   upstream code) sets this to disabled.\n\n   Input:\n   1. triggerName: The name of the runtime trigger you wish to create. Ensure you provide a \n      unique value to this parameter since it will be declared as a global variable.\n\n   Output:\n   2. &triggerName : A global variable which takes the name provided to triggerName.\n\n   Also at: https://github.com/SundareshSankaran/sas_utility_programs/blob/main/code/Create_Run_Time_Trigger/macro_create_runtime_trigger.sas\n*-------------------------------------------------------------------------------------------- */\n\n%macro _create_runtime_trigger(triggerName);\n\n   %global &triggerName.;\n\n   %if %sysevalf(%superq(&triggerName.)=, boolean)  %then %do;\n  \n      %put NOTE: Trigger macro variable &triggerName. does not exist. Creating it now.;\n      %let &triggerName.=1;\n\n   %end;\n\n%mend _create_runtime_trigger;\n\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to create an error flag for capture during code execution.\n\n   Input:\n      1. errorFlagName: The name of the error flag you wish to create. Ensure you provide a \n         unique value to this parameter since it will be declared as a global variable.\n      2. errorFlagDesc: The name of an error flag description variable to hold the error \n         description.\n\n    Output:\n      1. &errorFlagName : A global variable which takes the name provided to errorFlagName.\n      2. &errorFlagDesc : A global variable which takes the name provided to errorFlagDesc.\n\n   Also available at: \n   https://github.com/SundareshSankaran/sas_utility_programs/blob/main/code/Error%20Flag%20Creation/macro_create_error_flag.sas\n*------------------------------------------------------------------------------------------ */\n\n%macro _create_error_flag(errorFlagName, errorFlagDesc);\n\n   %global &errorFlagName.;\n   %global &errorFlagDesc.;\n   %let &errorFlagName.=0;\n   %let &errorFlagDesc. = No errors reported so far;\n   \n%mend _create_error_flag;\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to identify whether a given folder location provided from a \n   SAS Studio Custom Step folder selector happens to be a SAS Content folder\n   or a folder on the filesystem (SAS Server).\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _path_identifier: Set inside macro, a global variable indicating the prefix of the \n      path provided.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Identify%20SAS%20Content%20or%20Server/macro_identify_sas_content_server.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _identify_content_or_server(pathReference);\n   %global _path_identifier;\n   data _null_;\n      call symput(\"_path_identifier\", scan(\"&pathReference.\",1,\":\",\"MO\"));\n   run;\n   %put NOTE: _path_identifier is &_path_identifier. ;\n%mend _identify_content_or_server;\n\n\n/* -----------------------------------------------------------------------------------------* \n   Macro to extract the path provided from a SAS Studio Custom Step file or folder selector.\n\n   Input:\n   1. pathReference: A path reference provided by the file or folder selector control in \n      a SAS Studio Custom step.\n\n   Output:\n   1. _sas_folder_path: Set inside macro, a global variable containing the path.\n\n   Also available at: https://raw.githubusercontent.com/SundareshSankaran/sas_utility_programs/main/code/Extract%20SAS%20Folder%20Path/macro_extract_sas_folder_path.sas\n\n*------------------------------------------------------------------------------------------ */\n\n%macro _extract_sas_folder_path(pathReference);\n\n   %global _sas_folder_path;\n\n   data _null_;\n      call symput(\"_sas_folder_path\", scan(\"&pathReference.\",2,\":\",\"MO\"));\n   run;\n\n%mend _extract_sas_folder_path;\n\n\n/* ------------------------------------------------------------------------------------------------* \n   Macro to check whether a path to Python is available to a compute \n   session where this program runs.  Detailed macro available at \n   https://github.com/SundareshSankaran/sas_utility_programs/blob/main/code/Check_For_Python/macro_python_check.sas\n\n   If you already know you are running this code in a Compute server session, you can call the \n   %_env_check_python_compute macro directly, as done here.\n\n   Sundaresh Sankaran, 20FEB2024\n*----------------------------------------------------------------------------------------------------- */\n\n%macro _env_check_python_compute(errorFlagName, errorFlagDesc);\n\n   %global PROC_PYPATH;\n\n   data _null_;\n\n      /* ----------------------------------------------------------------------------------------------* \n         Obtain system options and store them inside macro variables.\n      *----------------------------------------------------------------------------------------------- */\n      proc_pypath = sysget('PROC_PYPATH');\n      viya_lockdown_user_methods = sysget('VIYA_LOCKDOWN_USER_METHODS');\n      compute_enable = sysget('COMPUTESERVER_LOCKDOWN_ENABLE');\n      does_file_at_pypath_exist=fileexist(proc_pypath);\n\n      /* ----------------------------------------------------------------------------------------------* \n         Let's start from the end\n         Check if PROC_PYPATH exists\n      *----------------------------------------------------------------------------------------------- */\n\n      if proc_pypath = \"\" then do;\n         call symputx(&errorFlagName.,1);\n         call symput(&errorFlagDesc., \"PROC_PYPATH environment variable not populated, indicating that Python may not have been configured.\");\n      end;\n\n      else do;\n\n         /* -------------------------------------------------------------------------------------------* \n            Check if PROC_PYPATH points to a valid file\n         *-------------------------------------------------------------------------------------------- */\n\n         if does_file_at_pypath_exist = 0 then do;\n            call symputx(&errorFlagName.,1);\n            call symput(&errorFlagDesc., \"The file referred by PROC_PYPATH does not exist, indicating path to Python may have been configured incorrectly.\");             \n         end;\n\n         else do;\n\n            /* -----------------------------------------------------------------------------------------* \n               Check if COMPUTESERVER_LOCKDOWN_ENABLE = 0, indicating a permissive (and potentially \n               insecure) environment.\n            *------------------------------------------------------------------------------------------ */\n\n            if compute_enable = '1' then do;\n\n               /* --------------------------------------------------------------------------------------* \n                  Check if PYTHON and SOCKET appear in viya_lockdown_user_methods.\n                  There's an additional PYTHON_EMBED option which is included as a strict check (enabling \n                  Python to run in a submit block).\n               *--------------------------------------------------------------------------------------- */\n\n               if index(lowcase(viya_lockdown_user_methods),\"python\") > 0 and index(lowcase(viya_lockdown_user_methods),\"socket\") > 0 and index(lowcase(viya_lockdown_user_methods),\"python_embed\") > 0 then do;\n                  call symput(\"PROC_PYPATH\", proc_pypath);\n                  call symputx(&errorFlagName.,0);\n                  call symput(&errorFlagDesc., \"A path to Python is available in this compute session and Python use is part of Viya enabled methods.\") ;\n               end;\n\n               else do;\n                  call symputx(&errorFlagName.,1);\n                  call symput(&errorFlagDesc., \"Required access methods to run Python don't seem to form part of the user methods allowed in Viya. Please take steps to enable PYTHON, PYTHON_EMBED and SOCKET\");             \n               end;\n\n            end;\n\n            else do;\n               call symput(\"PROC_PYPATH\", proc_pypath);\n               call symputx(&errorFlagName.,0);\n               call symput(&errorFlagDesc., \"A path to Python is available in this compute session and COMPUTESERVER_LOCKDOWN_ENABLE is disabled. While you can run Python, note that setting COMPUTESERVER_LOCKDOWN_ENABLE to 0 is not recommended.\");\n            end;\n\n         end;\n\n      end;\n\n   run;\n\n%mend _env_check_python_compute;\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE MACRO \n\n   _aor prefix stands for Azure OpenAI RAG\n*------------------------------------------------------------------------------------------*/\n\n%macro _aor_pf_execution_code;\n\n   %put NOTE: Starting main execution code;\n\n   %global responseVar;\n\n/*-----------------------------------------------------------------------------------------*\n   Create an error flag. \n*------------------------------------------------------------------------------------------*/\n\n   %_create_error_flag(_aor_error_flag, _aor_error_desc);\n\n   %put NOTE: Error flag created;\n\n/*-----------------------------------------------------------------------------------------*\n   Check if Python's available in the environment. \n*------------------------------------------------------------------------------------------*/\n\n   %_env_check_python_compute(\"_aor_error_flag\",\"_aor_error_desc\");\n\n   %if &_aor_error_flag.=1 %then %do;\n      %put ERROR: &_aor_error_desc. ;\n   %end;\n\n   %put NOTE: Python check complete;\n\n/*-----------------------------------------------------------------------------------------*\n   Check if path for Chroma DB provided happens to be a filesystem (SAS Server) or SAS \n   Content path. Prior to that, insert /tmp as a placeholder in case this field has not \n   been entered.\n*------------------------------------------------------------------------------------------*/\n\n   %if &_aor_error_flag. = 0 %then %do;\n\n      %if \"&persistentPathName.\"=\"\" %then %do;\n         %let persistentPathName=sasserver:/tmp;\n      %end;\n\n      %else %do;\n         %_identify_content_or_server(&persistentPathName.);\n\n         %if \"&_path_identifier.\"=\"sasserver\" %then %do;\n            %put NOTE: Folder location prefixed with &_path_identifier. is on the SAS Server.;\n         %end;\n\n         %else %do;\n            %let _aor_error_flag=1;\n            %put ERROR: Please select a valid folder on the SAS Server (filesystem) for persisting the database. ;\n         %end;\n\n      %end;\n\n   %end;\n\n   %if &_aor_error_flag. = 0 %then %do;\n\n      %_extract_sas_folder_path(&persistentPathName.);\n      %if \"&_sas_folder_path.\" = \"\" %then %do;\n         %let _aor_error_flag=1;\n         %let _aor_error_desc = The persistent path provided is empty, please select a valid path  ;\n         %put ERROR: &_aor_error_desc. ;\n      %end;\n\n   %end;\n\n   %if &_aor_error_flag. = 0 %then %do;\n      %global persistentPath;\n      %let persistentPath = &_sas_folder_path;\n      %let _sas_folder_path=;\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check if path for Azure Key Location  happens to be a filesystem (SAS Server) opath. \n*------------------------------------------------------------------------------------------*/\n   %if &_aor_error_flag. = 0 %then %do;\n\n      %_identify_content_or_server(&azureKeyLocation.);\n\n      %if \"&_path_identifier.\"=\"sasserver\" %then %do;\n         %put NOTE: Folder location prefixed with &_path_identifier. is on the SAS Server.;\n      %end;\n\n      %else %do;\n         %let _aor_error_flag=1;\n         %put ERROR: Please select a valid file on the SAS Server (filesystem) containing your Azure OpenAI key.  Key should be in a secure location within filesystem. ;\n      %end;\n\n   %end;\n\n   %if &_aor_error_flag. = 0 %then %do;\n\n      %_extract_sas_folder_path(&azureKeyLocation.);\n\n      %if \"&_sas_folder_path.\" = \"\" %then %do;\n         %let _aor_error_flag=1;\n         %let _aor_error_desc = The answer bank provided is empty, please select a valid path  ;\n         %put ERROR: &_aor_error_desc. ;\n      %end;\n\n   %end;\n\n   %if &_aor_error_flag. = 0 %then %do;\n      %global _key_location;\n      %let _key_location = &_sas_folder_path;\n      %let _sas_folder_path=;\n   %end;\n\n   %if &_aor_error_flag. = 0 %then %do;\n\n      data _null_;\n         infile \"&_key_location.\" lrecl=1000;\n         input @;\n         call symput(\"AZURE_OPENAI_KEY\",_INFILE_);\n      run;\n \n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Check if a file or folder has been selected and assign value to a common variable \n*------------------------------------------------------------------------------------------*/\n\n   %if \"&folder_or_file_selector.\" = \"existing\" %then %do;\n      %put NOTE: Existing collection found ;\n   %end;\n\n   %else %do;\n\n      %if &_aor_error_flag. = 0 %then %do;\n\n         %global answerPath;\n\n         %if \"&folder_or_file_selector.\" = \"file\" %then %do;\n            %let answerPath = &answerBankFile.;\n         %end;\n\n         %else %if \"&folder_or_file_selector.\" = \"folder\" %then %do;\n            %let answerPath = &answerBankFolder.;\n         %end;\n\n         %_identify_content_or_server(&answerPath.);\n\n         %if \"&_path_identifier.\"=\"sasserver\" %then %do;\n            %put NOTE: Location prefixed with &_path_identifier. is on the SAS Server.;\n         %end;\n\n         %else %do;\n            %let _aor_error_flag=1;\n            %let _aor_error_desc = Please select a valid file or folder on the SAS Server (filesystem) containing your answer bank.  ;\n            %put ERROR: &_aor_error_desc. ;\n         %end;\n\n      %end;\n\n      %if &_aor_error_flag. = 0 %then %do;\n\n         %_extract_sas_folder_path(&answerPath.);\n\n         %if \"&_sas_folder_path.\" = \"\" %then %do;\n            %let _aor_error_flag=1;\n            %let _aor_error_desc = The answer bank provided is empty, please select a valid path  ;\n            %put ERROR: &_aor_error_desc. ;\n         %end;\n\n      %end;\n\n      %if &_aor_error_flag. = 0 %then %do;\n         %global _data_location;\n         %let _data_location = &_sas_folder_path;\n         %let _sas_folder_path=;\n      %end;\n\n   %end;\n\n \n\n   %if &_aor_error_flag. = 0 %then %do;\n\n      %if \"&azureRegion.\" = \"\" %then %do;\n         %let azureRegion=eastus2;\n      %end;\n\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Run Python block (accepts inputs and loads documents along with embeddings)\n*------------------------------------------------------------------------------------------*/\n   %if &_aor_error_flag. = 0 %then %do;\n\n      proc python infile = aorcode;\n      quit;\n\n      filename aorcode clear;\n\n   %end;\n\n/*-----------------------------------------------------------------------------------------*\n   Print results to ODS html\n*------------------------------------------------------------------------------------------*/\n   filename rwiOut \".\";\n   ods html close;\n   ods html path=rwiOut file=\"UnformatText.html\";\n\t\n   title \"&questionText\";\n\t\n   data _null_;\n       \n      dcl odsout obj();\n\t  obj.format_text(data: \" %bquote(&responsevar) \"); \n\t  \n   run;\n\t\n   ods html close;\n   ods html; /* Not required in SAS Studio */\n\n%mend _aor_pf_execution_code;\n\n\n/*-----------------------------------------------------------------------------------------*\n   EXECUTION CODE\n   The execution code is controlled by the trigger variable defined in this custom step. This\n   trigger variable is in an \"enabled\" (value of 1) state by default, but in some cases, as \n   dictated by logic, could be set to a \"disabled\" (value of 0) state.\n*------------------------------------------------------------------------------------------*/\n/*-----------------------------------------------------------------------------------------*\n   Create run-time trigger. \n*------------------------------------------------------------------------------------------*/\n\n%_create_runtime_trigger(_aor_run_trigger);\n\n%if &_aor_run_trigger. = 1 %then %do;\n\n   %_aor_pf_execution_code;\n\n%end;\n\n%if &_aor_run_trigger. = 0 %then %do;\n\n   %put NOTE: This step has been disabled.  Nothing to do.;\n\n%end;\n\n\n%put NOTE: Final summary;\n%put NOTE: Status of error flag - &_aor_error_flag. ;\n%put NOTE: Error desc - &_aor_error_desc. ;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Clean up existing macro variables and macro definitions.\n*------------------------------------------------------------------------------------------*/\n%if %symexist(answerPath) %then %do;\n   %symdel answerPath;\n%end;\n\n%if %symexist(_aor_run_trigger) %then %do;\n   %symdel _aor_run_trigger;\n%end;\n\n%if %symexist(_path_identifier) %then %do;\n   %symdel _path_identifier;\n%end;\n\n%if %symexist(_sas_folder_path) %then %do;\n   %symdel _sas_folder_path;\n%end;\n\n%if %symexist(PROC_PYPATH) %then %do;\n   %symdel PROC_PYPATH;\n%end;\n\n%if %symexist(responseVar) %then %do;\n   %symdel responseVar;\n%end;\n\n%if %symexist(persistentPath) %then %do;\n   %symdel persistentPath;\n%end;\n\n%if %symexist(_key_location) %then %do;\n   %symdel _key_location;\n%end;\n\n%if %symexist(answerPath) %then %do;\n   %symdel answerPath;\n%end;\n\n%if %symexist(_data_location) %then %do;\n   %symdel _data_location;\n%end;\n\n%if %symexist(_aor_error_flag) %then %do;\n   %symdel _aor_error_flag;\n%end;\n\n%if %symexist(_aor_error_desc) %then %do;\n   %symdel _aor_error_desc;\n%end;"}}